#Hey it's me Desire I encoded this File to kick ass of Credit thief's if you are a Modder you can decode it 
#If you have any problem or got bug contact me on discord 
# Discord id :- Desire#2365

exec('import re,base64,string')

exec(base64.b64decode(""))